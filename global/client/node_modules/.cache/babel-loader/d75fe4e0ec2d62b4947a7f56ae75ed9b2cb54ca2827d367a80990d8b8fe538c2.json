{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from '../../../utils/axios'\n\nconst initialState = {\n  comments: [],\n  loading: false\n};\n\n// export const createComment = createAsyncThunk(\n//     'comment/createComment',\n//     async ({ postId, comment }) => {\n//         try {\n//             const { data } = await axios.post(`/comments/${postId}`, {\n//                 postId,\n//                 comment,\n//             })\n//             return data\n//         } catch (error) {\n//             console.log(error)\n//         }\n//     },\n// )\n\nexport const commentSlice = createSlice({\n  name: 'comment',\n  initialState,\n  reducers: {}\n  //     extraReducers: {\n  //         // Создание поста\n  //         [createComment.pending]: (state) => {\n  //             state.loading = true\n  //         },\n  //         [createComment.fulfilled]: (state, action) => {\n  //             state.loading = false\n  //             state.comments.push(action.payload)\n  //         },\n  //         [createComment.rejected]: (state) => {\n  //             state.loading = false\n  //         },\n  //         // Получение комментов\n  //         // [getPostComments.pending]: (state) => {\n  //         //     state.loading = true\n  //         // },\n  //         // [getPostComments.fulfilled]: (state, action) => {\n  //         //     state.loading = false\n  //         //     state.comments = action.payload\n  //         // },\n  //         // [getPostComments.rejected]: (state) => {\n  //         //     state.loading = false\n  //         // },\n  //     },\n});\n\nexport default commentSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","comments","loading","commentSlice","name","reducers","reducer"],"sources":["C:/Users/Artiem/source/repos/vscode/3 курс/Control Task/client/src/redux/features/comment/commentSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\n// import axios from '../../../utils/axios'\r\n\r\nconst initialState = {\r\n    comments: [],\r\n    loading: false,\r\n}\r\n\r\n\r\n// export const createComment = createAsyncThunk(\r\n//     'comment/createComment',\r\n//     async ({ postId, comment }) => {\r\n//         try {\r\n//             const { data } = await axios.post(`/comments/${postId}`, {\r\n//                 postId,\r\n//                 comment,\r\n//             })\r\n//             return data\r\n//         } catch (error) {\r\n//             console.log(error)\r\n//         }\r\n//     },\r\n// )\r\n\r\n\r\nexport const commentSlice = createSlice({\r\n    name: 'comment',\r\n    initialState,\r\n    reducers: {},\r\n//     extraReducers: {\r\n//         // Создание поста\r\n//         [createComment.pending]: (state) => {\r\n//             state.loading = true\r\n//         },\r\n//         [createComment.fulfilled]: (state, action) => {\r\n//             state.loading = false\r\n//             state.comments.push(action.payload)\r\n//         },\r\n//         [createComment.rejected]: (state) => {\r\n//             state.loading = false\r\n//         },\r\n//         // Получение комментов\r\n//         // [getPostComments.pending]: (state) => {\r\n//         //     state.loading = true\r\n//         // },\r\n//         // [getPostComments.fulfilled]: (state, action) => {\r\n//         //     state.loading = false\r\n//         //     state.comments = action.payload\r\n//         // },\r\n//         // [getPostComments.rejected]: (state) => {\r\n//         //     state.loading = false\r\n//         // },\r\n//     },\r\n})\r\n\r\nexport default commentSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE;;AAEA,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE;AACb,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,YAAY,GAAGL,WAAW,CAAC;EACpCM,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE,CAAC;EACf;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA,CAAC,CAAC;;AAEF,eAAeF,YAAY,CAACG,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}